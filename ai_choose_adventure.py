##need to pay for openAI to use this app.
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-adventure-game.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("adventure_game-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = "database"
OPENAI_API_KEY = "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"

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

message_history = CassandraChatMessageHistory(
    session_id = "history",
    session=session,
    keyspace=ASTRA_DB_KEYSPACE,
    ttl_seconds=3600
)

message_history.clear()

cass_buff_memory = ConversationBufferMemory(
    memory_key="chat_history",
    chat_memory=message_history
)
template = """
As the kindgoms best warrior you have been taken captive
by your kingdoms enemies.  You need to escape from your prison and 
rescue the healer from the enemies as well.  Your name is Eron and the healer's name is Alba.
After Eron has rescued the healer they must escape from the 
enemies land over the mountains to their homeland.
You must navigate Eron through challenges, choices, and consequences, dynamically adapting the tale based
on Eron's decisions.  Your goal is to create a branching narrative experience where each choice
leads to a new path, ultimately determining whether Eron rescues Alba and they both make it back to thier homeland.

Here are some rules to follow:
1. Start by asking the player how they will escape.  They can choose between:
a. Waiting till darkness falls then rubbing their bonds off on a sharp rock and sneaking past their guard.
b. Waiting till darkenss falls and then fighting their guard.


2. If they choose a then ask them if they want to steal a weapon.
**context: The pro of choosing a is that noone will know they have escaped.  The con is that they do not have a weapon.

 If they choose b have them steal the weapon from the guard (after they defeat the guard).
** context: The pro of choosing a is that they have a weapon after deafeating the guard.  The con is that the town is alerted of their escape.  They must be extra cautious.

Make route b more difficult than a

3. Have paths that lead to success but more paths that lead to death.

4. The paths that lead to death can be for Eron before he has rescued Alba
or for Eron and Alba after he has rescued her.

5. If the user dies generate a response that explains 
the death and say sorry you lose.

Here is the chat history, use this to understand what to say next: {chat_history}
User: {human_input}
AI:


"""

prompt= PromptTemplate(
    input_variables= ["chat_history", "human_input"],
    template= template
)

llm = OpenAI(openai_api_key=OPENAI_API_KEY)

llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

response = llm_chain.predict(human_input="start the game")

print(response)
# row = session.execute("select release_version from system.local").one()
# if row:
#   print(row[0])
# else:
#   print("An error occurred.")

